[38;5;13m[V] Loaded Module: polygraphy.util    | Path: ['/home/mec/.local/lib/python3.8/site-packages/polygraphy/util'][0m
[38;5;13m[V] Model: quant_LeVit-QAT.onnx[0m
[38;5;13m[V] Loaded Module: polygraphy         | Version: 0.36.2 | Path: ['/home/mec/.local/lib/python3.8/site-packages/polygraphy'][0m
[38;5;14m[I] Starting iterations[0m
[38;5;13m[V] Loaded Module: tensorrt           | Version: 8.4.0.11 | Path: ['/usr/lib/python3.8/dist-packages/tensorrt'][0m
[38;5;14m[I] Using DataType.FLOAT as higher precision[0m
[38;5;14m[I] RUNNING | Iteration 1 | Approximately 10 iteration(s) remaining[0m
[I] Selecting first 767 layer(s) to run in higher precision
[38;5;13m[V] Loaded Module: polygraphy.backend.trt.util[0m
[38;5;13m[V] Loaded Module: numpy              | Version: 1.22.4 | Path: ['/home/mec/.local/lib/python3.8/site-packages/numpy'][0m
[38;5;13m[V] Marking layer(s): {2, 5, 7, 10, 11, 12, 13, 14, 15, 18, 21, 23, 26, 27, 28, 29, 30, 31, 34, 37, 39, 42, 43, 44, 45, 46, 47, 50, 53, 55, 58, 59, 60, 61, 66, 67, 70, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 121, 122, 123, 126, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 244, 245, 246, 249, 252, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 344, 345, 346, 347, 357, 358, 359, 365, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 415, 416, 417, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 537, 538, 539, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 564, 567, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 660, 661, 662, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 687, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 713, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 760, 761, 762, 763, 764, 765, 766} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 2 | Approximately 9 iteration(s) remaining[0m
[I] Selecting first 1151 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {2, 5, 7, 10, 11, 12, 13, 14, 15, 18, 21, 23, 26, 27, 28, 29, 30, 31, 34, 37, 39, 42, 43, 44, 45, 46, 47, 50, 53, 55, 58, 59, 60, 61, 66, 67, 70, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 121, 122, 123, 126, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 244, 245, 246, 249, 252, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 344, 345, 346, 347, 357, 358, 359, 365, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 415, 416, 417, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 537, 538, 539, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 564, 567, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 660, 661, 662, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 687, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 713, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 783, 784, 785, 788, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 883, 884, 885, 886, 896, 897, 898, 904, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 954, 955, 956, 959, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1076, 1077, 1078, 1081, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1103, 1106, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1126, 1129, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1148} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 3 | Approximately 8 iteration(s) remaining[0m
[I] Selecting first 1343 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {2, 5, 7, 10, 11, 12, 13, 14, 15, 18, 21, 23, 26, 27, 28, 29, 30, 31, 34, 37, 39, 42, 43, 44, 45, 46, 47, 50, 53, 55, 58, 59, 60, 61, 66, 67, 70, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 121, 122, 123, 126, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 244, 245, 246, 249, 252, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 344, 345, 346, 347, 357, 358, 359, 365, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 415, 416, 417, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 537, 538, 539, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 564, 567, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 660, 661, 662, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 687, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 713, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 783, 784, 785, 788, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 883, 884, 885, 886, 896, 897, 898, 904, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 954, 955, 956, 959, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1076, 1077, 1078, 1081, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1103, 1106, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1126, 1129, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1148, 1151, 1153, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1199, 1200, 1201, 1204, 1207, 1209, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1226, 1229, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1249, 1252, 1254, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1271, 1274, 1276, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316, 1322, 1323, 1324, 1327, 1330, 1332, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 4 | Approximately 7 iteration(s) remaining[0m
[I] Selecting first 1439 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {2, 5, 7, 10, 11, 12, 13, 14, 15, 18, 21, 23, 26, 27, 28, 29, 30, 31, 34, 37, 39, 42, 43, 44, 45, 46, 47, 50, 53, 55, 58, 59, 60, 61, 66, 67, 70, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 121, 122, 123, 126, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 244, 245, 246, 249, 252, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 344, 345, 346, 347, 357, 358, 359, 365, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 415, 416, 417, 420, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 537, 538, 539, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 564, 567, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 660, 661, 662, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 687, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 713, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 783, 784, 785, 788, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 883, 884, 885, 886, 896, 897, 898, 904, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 954, 955, 956, 959, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1076, 1077, 1078, 1081, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1103, 1106, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1126, 1129, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1148, 1151, 1153, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1199, 1200, 1201, 1204, 1207, 1209, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1226, 1229, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1249, 1252, 1254, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1271, 1274, 1276, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316, 1322, 1323, 1324, 1327, 1330, 1332, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1349, 1352, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1369, 1372, 1375, 1377, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1394, 1397, 1399, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1412, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1431, 1432, 1434, 1435, 1436, 1437, 1438} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 5 | Approximately 6 iteration(s) remaining[0m
[I] Selecting first 1487 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 6 | Approximately 5 iteration(s) remaining[0m
[I] Selecting first 1511 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 7 | Approximately 4 iteration(s) remaining[0m
[I] Selecting first 1523 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 8 | Approximately 3 iteration(s) remaining[0m
[I] Selecting first 1529 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
[38;5;9m[!] Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;11m[W] Failed to create network or engine, continuing to the next iteration.
    Note: Error was: Invalid Engine. Please ensure the engine was built correctly[0m
[38;5;14m[I] RUNNING | Iteration 9 | Approximately 2 iteration(s) remaining[0m
[I] Selecting first 1532 layer(s) to run in higher precision
[38;5;13m[V] Marking layer(s): {} to run in DataType.FLOAT precision[0m
[38;5;11m[W] Int8 Calibration is using randomly generated input data.
    This could negatively impact accuracy if the inference-time input data is dissimilar to the randomly generated calibration data.
    You may want to consider providing real data via the --data-loader-script option.[0m
[38;5;13m[V] Created calibrator [cache=./cal_trt.bin][0m
[38;5;13m[V] Builder and Network were provided directly instead of via a Callable. This loader will not assume ownership. Please ensure that they are freed.[0m
[38;5;13m[V]     Setting TensorRT Optimization Profiles[0m
[38;5;13m[V]     Input tensor: input_0 (dtype=DataType.FLOAT, shape=(1, 3, 224, 224)) | Setting input tensor shapes to: (min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])[0m
[I]     Configuring with profiles: [Profile().add(input_0, min=[1, 3, 224, 224], opt=[1, 3, 224, 224], max=[1, 3, 224, 224])]
[38;5;14m[I] Building engine with configuration:
    Workspace            | 4294967296 bytes (4096.00 MiB)
    Precision            | TF32: False, FP16: False, INT8: True, Obey Precision Constraints: True, Strict Types: False
    Tactic Sources       | ['CUBLAS', 'CUBLAS_LT', 'CUDNN']
    Safety Restricted    | False
    Profiles             | 1 profile(s)[0m
